#!/usr/local/bin/bash

mkdir /tmp/dbg || true

set -e
set -o pipefail

# тут пусто - все из env
echo "new: [$*]" >> /tmp/dbg/new.txt
env >> /tmp/dbg/env-new.txt

if [ ! -t 0 ]
then
    INPUT=$(cat -)
fi
MYPATH=$(realpath ${BASH_SOURCE[0]})
MYDIR=$(dirname "${MYPATH}")
TEMPLATES="$MYDIR/cloudconfig"

# Defaults
# set this variable to 0 in the provider config to disable.
BOOT_FROM_VOLUME=${BOOT_FROM_VOLUME:-1}

# END Defaults

if [ -z "$GARM_PROVIDER_CONFIG_FILE" ]
then
    echo "no config file specified in env"
    exit 1
fi

source "$GARM_PROVIDER_CONFIG_FILE"

declare -A OS_TO_GH_ARCH_MAP
OS_TO_GH_ARCH_MAP["x86_64"]="x64"
OS_TO_GH_ARCH_MAP["armv7l"]="arm64"
OS_TO_GH_ARCH_MAP["mips64"]="arm64"
OS_TO_GH_ARCH_MAP["mips64el"]="arm64"
OS_TO_GH_ARCH_MAP["mips"]="arm"
OS_TO_GH_ARCH_MAP["mipsel"]="arm"

declare -A OS_TO_GARM_ARCH_MAP
OS_TO_GARM_ARCH_MAP["x86_64"]="amd64"
OS_TO_GARM_ARCH_MAP["armv7l"]="arm64"
OS_TO_GARM_ARCH_MAP["mips64"]="arm64"
OS_TO_GARM_ARCH_MAP["mips64el"]="arm64"
OS_TO_GARM_ARCH_MAP["mips"]="arm"
OS_TO_GARM_ARCH_MAP["mipsel"]="arm"

declare -A GARM_TO_GH_ARCH_MAP
GARM_TO_GH_ARCH_MAP["amd64"]="x64"
GARM_TO_GH_ARCH_MAP["arm"]="arm"
GARM_TO_GH_ARCH_MAP["arm64"]="arm64"

declare -A STATUS_MAP
STATUS_MAP["ACTIVE"]="running"
STATUS_MAP["SHUTOFF"]="stopped"
STATUS_MAP["BUILD"]="pending_create"
STATUS_MAP["ERROR"]="error"
STATUS_MAP["DELETING"]="pending_delete"

function checkValNotNull() {
    if [ -z "$1" -o "$1" == "null" ];then
        echo "failed to fetch value $2"
        return 1
    fi
    return 0
}

### image show sample:
#openstack image show myCirrosImage
#+------------------+------------------------------------------------------+
#| Field            | Value                                                |
#+------------------+------------------------------------------------------+
#| checksum         | ee1eca47dc88f4879d8a229cc70a07c6                     |
#| container_format | ami                                                  |
#| created_at       | 2016-08-11T15:07:26Z                                 |
#| disk_format      | ami                                                  |
#| file             | /v2/images/d07831df-edc3-4817-9881-89141f9134c3/file |
#| id               | d07831df-edc3-4817-9881-89141f9134c3                 |
#| min_disk         | 0                                                    |
#| min_ram          | 0                                                    |
#| name             | myCirrosImage                                        |
#| owner            | d88310717a8e4ebcae84ed075f82c51e                     |
#| protected        | False                                                |
#| schema           | /v2/schemas/image                                    |
#| size             | 13287936                                             |
#| status           | active                                               |
#| tags             |                                                      |
#| updated_at       | 2016-08-11T15:20:02Z                                 |
#| virtual_size     | None                                                 |
#| visibility       | private                                              |
#+------------------+------------------------------------------------------+
function getOSImageDetails() {
    IMAGE_ID=$(echo "$INPUT" | jq -r -c '.image')
#    OS_IMAGE=$(openstack image show "$IMAGE_ID" -f json)
#    echo "$OS_IMAGE"
    echo "MB_OSIMAGE" >> /tmp/dbg/getosimagedetails.txt

}

function getOpenStackNetworkID() {
#    if [ -z "$OPENSTACK_PRIVATE_NETWORK" ]
#    then
#        echo "no network specified in config"
#        return 1
#    fi
#
#    NET_ID=$(openstack network show ${OPENSTACK_PRIVATE_NETWORK} -f value -c id)
#    if [ -z "$NET_ID" ];then
#        echo "failed to find network $OPENSTACK_PRIVATE_NETWORK"
#    fi
    NET_ID="21"
    echo ${NET_ID}

}

function getVolumeSizeFromFlavor() {
    local flavor="$1"

    FLAVOR_DETAILS=$(openstack flavor show "${flavor}" -f json)
    DISK_SIZE=$(echo "$FLAVOR_DETAILS" | jq -c -r '.disk')
    if [ -z "$DISK_SIZE" ];then
        echo "failed to get disk size from flavor"
        return 1
    fi

    echo ${DISK_SIZE}
}

function waitForVolume() {
    local volumeName=$1
#    set +e
#    status=$(openstack volume show "${volumeName}" -f json | jq -r -c '.status')
#    if [ $? -ne 0 ];then
#        CODE=$?
#        set -e
#        return $CODE
#    fi
#    set -e
#    while [ "${status}" != "available" -a "${status}" != "error" ];do
#        status=$(openstack volume show "${volumeName}" -f json | jq -r -c '.status')
#    done

    status="ACTIVE"
}

function createVolumeFromImage() {
    local image="$1"
    local disk_size="$2"
    local instance_name="$3"
    if [ -z ${image} -o -z ${disk_size} -o -z "${instance_name}" ];then
        echo "missing image, disk size or instance name in function call"
        return 1
    fi
    # Instance names contain a UUID. It should be safe to create a volume with the same name and
    # expect it to be unique.
    set +e
    VOLUME_INFO=$(openstack volume create -f json --image "${image}" --size "${disk_size}" "${instance_name}")
    if [ $? -ne 0 ]; then
        CODE=$?
        openstack volume delete "${instance_name}" || true
        set -e
        return $CODE
    fi
    waitForVolume "${instance_name}"
    echo "${VOLUME_INFO}"
}

function requestedArch() {
    ARCH=$(echo "$INPUT" | jq -c -r '.arch')
    checkValNotNull "${ARCH}" "arch" || return $?
    echo "${ARCH}"
}

function downloadURL() {
    [ -z "$1" -o -z "$2" ] && return 1
    GH_ARCH="${GARM_TO_GH_ARCH_MAP[$2]}"
    URL=$(echo "$INPUT" | jq -c -r --arg OS "$1" --arg ARCH "$GH_ARCH" '(.tools[] | select( .os == $OS and .architecture == $ARCH)).download_url')
    checkValNotNull "${URL}" "download URL" || return $?
    echo "${URL}"
}

function downloadFilename() {
    [ -z "$1" -o -z "$2" ] && return 1
    GH_ARCH="${GARM_TO_GH_ARCH_MAP[$2]}"
    FN=$(echo "$INPUT" | jq -c -r --arg OS "$1" --arg ARCH "$GH_ARCH" '(.tools[] | select( .os == $OS and .architecture == $ARCH)).filename')
    checkValNotNull "${FN}" "download filename" || return $?
    echo "${FN}"
}

function poolID() {
    POOL_ID=$(echo "$INPUT" | jq -c -r '.pool_id')
    checkValNotNull "${POOL_ID}" "pool_id" || return $?
    echo "${POOL_ID}"
}

function flavor() {
#    FLAVOR=$(echo "$INPUT" | jq -c -r '.flavor')
#    checkValNotNull "${FLAVOR}" "flavor" || return $?
#    echo "${FLAVOR}"
    FLAVOR="myFlavor"
    echo "${FLAVOR}"
}

function image() {
#    IMG=$(echo "$INPUT" | jq -c -r '.image')
#    checkValNotNull "${IMG}" "image" || return $?
    IMG="myImg"
    echo "${IMG}"
}

function repoURL() {
    REPO=$(echo "$INPUT" | jq -c -r '.repo_url')
    checkValNotNull "${REPO}" "repo_url" || return $?
    echo "${REPO}"
}

function ghAccessToken() {
    TOKEN=$(echo "$INPUT" | jq -c -r '.github_runner_access_token')
    checkValNotNull "${TOKEN}" "github_runner_access_token" || return $?
    echo "${TOKEN}"
}

function callbackURL() {
    CB_URL=$(echo "$INPUT" | jq -c -r '."callback-url"')
    checkValNotNull "${CB_URL}" "callback-url" || return $?
    echo "${CB_URL}"
}

function callbackToken() {
    CB_TK=$(echo "$INPUT" | jq -c -r '."instance-token"')
    checkValNotNull "${CB_TK}" "instance-token" || return $?
    echo "${CB_TK}"
}

function instanceName() {
#    NAME=$(echo "$INPUT" | jq -c -r '.name')
#    checkValNotNull "${NAME}" "name" || return $?
    NAME=$( /usr/local/cbsd/modules/k8s.d/misc/freejname.sh | awk '{printf $1}' )
    echo "${NAME}"
}

function labels() {
    LBL=$(echo "$INPUT" | jq -c -r '.labels | join(",")')
    checkValNotNull "${LBL}" "labels" || return $?
    echo "${LBL}"
}

function getCloudConfig() {

#    IMAGE_DETAILS=$(getOSImageDetails)

#    echo "get cloud config: $IMAGE_DETAILS" >> /tmp/dbg/getcloudconfig.txt

#    OS_TYPE=$(echo "${IMAGE_DETAILS}" | jq -c -r '.properties.os_type')
#    checkValNotNull "${OS_TYPE}" "os_type" || return $?

#    echo "get cloud config 1" >> /tmp/dbg/getcloudconfig.txt

    ARCH=$(requestedArch)
#    DW_URL=$(downloadURL "${OS_TYPE}" "${ARCH}")
#    DW_FILENAME=$(downloadFilename "${OS_TYPE}" "${ARCH}")
    DW_URL="https://myb.convectix.com/DL/gh/actions-runner-linux-x64-latest.tar.gz"
    DW_FILENAME="actions-runner-linux-x64-latest.tar.gz"
    LABELS=$(labels)

    TMP_SCRIPT=$(mktemp)
    TMP_CC=$(mktemp)

    # where does the single quote come from here? trim it
    GARM_BOOTSTRAP_NAME=$( echo ${GARM_BOOTSTRAP_NAME} | tr -d "'" )
    GARM_BOOTSTRAP_FLAVOR=$( echo ${GARM_BOOTSTRAP_FLAVOR} | tr -d "'" )
    GARM_BOOTSTRAP_IMAGE=$( echo ${GARM_BOOTSTRAP_IMAGE} | tr -d "'" )

    #jname=$(instanceName)
    # $GARM_BOOTSTRAP_NAME in GH_RUNNER below
    #jname="${GARM_BOOTSTRAP_NAME}"
    jname="${INSTANCE_NAME}"

	echo "FL: ${GARM_BOOTSTRAP_FLAVOR}, IMA: ${GARM_BOOTSTRAP_IMAGE}" >> /tmp/win.txt

	FLAVOR="${GARM_BOOTSTRAP_FLAVOR}"

	case "${GARM_BOOTSTRAP_IMAGE}" in
		centos7)
			PROFILE="cloud-CentOS-7-x86_64"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="centos"
			OSLABEL="linux"
			;;
		centos8)
			PROFILE="cloud-CentOS-stream-8-x86_64"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="centos"
			OSLABEL="linux"
			;;
		centos9)
			PROFILE="cloud-CentOS-stream-9-x86_64"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="centos"
			OSLABEL="linux"
			;;
		debian10)
			PROFILE="cloud-Debian-x86-10"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="debian"
			OSLABEL="linux"
			;;
		debian11)
			PROFILE="cloud-Debian-x86-11"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="debian"
			OSLABEL="linux"
			;;
		dflybsd6)
			PROFILE="cloud-DragonflyBSD-hammer-x64-6"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-freebsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-dragonfly-bhyve")
			USER="dragonfly"
			OSLABEL="dragonflybsd"
			;;
		freebsd13_ufs)
			PROFILE="cloud-FreeBSD-ufs-x64-13.1"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-freebsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-freebsd-bhyve")
			USER="freebsd"
			OSLABEL="freebsd"
			;;
		freebsd13_zfs)
			PROFILE="cloud-FreeBSD-zfs-x64-13.1"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-freebsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-freebsd-bhyve")
			USER="freebsd"
			OSLABEL="freebsd"
			;;
		freebsd14_ufs)
			PROFILE="cloud-FreeBSD-ufs-x64-14"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-freebsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-freebsd-bhyve")
			USER="freebsd"
			OSLABEL="freebsd"
			;;
		freebsd14_zfs)
			PROFILE="cloud-FreeBSD-zfs-x64-14"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-freebsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-freebsd-bhyve")
			USER="freebsd"
			OSLABEL="freebsd"
			;;
		netbsd9)
			PROFILE="cloud-netbsd-x86-9"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-netbsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-netbsd")
			USER="netbsd"
			OSLABEL="netbsd"
			;;
		openbsd7)
			PROFILE="cloud-openbsd-x86-7"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-openbsd")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-openbsd")
			USER="openbsd"
			OSLABEL="openbsd"
			;;
		oracle7)
			PROFILE="cloud-Oracle-7-x86_64"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="oracle"
			OSLABEL="linux"
			;;
		oracle8)
			PROFILE="cloud-Oracle-8-x86_64"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="oracle"
			OSLABEL="linux"
			;;
		rocky8)
			PROFILE="cloud-Rocky-8-x86_64"
			INSTALL_TPL=$(cat "${TEMPLATES}/install_runner.tpl-linux")
			CC_TPL=$(cat "${TEMPLATES}/userdata.tpl-linux")
			USER="rocky"
			OSLABEL="linux"
			;;
		*)
			echo "UNKNOWN IMAGE: ${GARM_BOOTSTRAP_IMAGE}" >> /tmp/garm.err
			echo "UNKNOWN IMAGE: ${GARM_BOOTSTRAP_IMAGE}"
			exit 1
			;;
    esac

	LABELS=$( echo ${LABELS} | sed 's#,,#,#g' | tr -d " " )
	OIFS="${IFS}"
	IFS=","
	oslabel_exist=0
	for i in ${LABELS}; do
		IFS="${OIFS}"
		if [ "${i}" = "${OSLABEL}" ]; then
			oslabel_exist=1
			break
		fi
		IFS=","
	done
	IFS="${OIFS}"

	if [ ${oslabel_exist} -eq 0 ]; then
		LABELS="${LABELS},${OSLABEL}"
	fi


    echo "sed: ${TEMPLATES}/install_runner.tpl-freebsd [$LABELS][$GARM_BOOTSTRAP_NAME}]" >> /tmp/sed.txt

    echo "$INSTALL_TPL" | sed -e "s|GARM_CALLBACK_URL|$(callbackURL)|g" \
    -e "s|GARM_CALLBACK_TOKEN|$(callbackToken)|g" \
    -e "s|GH_DOWNLOAD_URL|${DW_URL}|g" \
    -e "s|GH_FILENAME|${DW_FILENAME}|g" \
    -e "s|GH_TARGET_URL|$(repoURL)|g" \
    -e "s|GH_RUNNER_TOKEN|$(ghAccessToken)|g" \
    -e "s|GH_RUNNER_NAME|${GARM_BOOTSTRAP_NAME}|g" \
    -e "s|GH_RUNNER_LABELS|${LABELS}|g" > ${TMP_SCRIPT}

    echo "${jname}" > /tmp/dbg/${GARM_BOOTSTRAP_NAME}.conf

    cp -a ${TMP_SCRIPT} /tmp/dbg/tmp_script_before.txt.$$

    #AS_B64=$(base64 -w0 ${TMP_SCRIPT})
    echo "${CC_TPL}" | sed -Ees:%%INSTALL_SRC%%:"${TMP_SCRIPT}":g \
	-es:%%JNAME%%:"${jname}":g \
	-es:%%PROFILE%%:"${PROFILE}":g \
	-es:%%USER%%:"${USER}":g \
	-es:%%FLAVOR%%:"${FLAVOR}":g \
	> ${TMP_CC}
    echo "${TMP_CC}"
    cp -a ${TMP_CC} /tmp/dbg/CBSDfile.$$
    echo "/usr/local/bin/cbsd up cbsdfile=/tmp/dbg/CBSDfile.$$" >> /tmp/up-garm.$$ 2>&1
    env NOCOLOR=1 /usr/local/bin/cbsd up cbsdfile=/tmp/dbg/CBSDfile.$$ >> /tmp/up-garm.$$ 2>&1
}

function waitForServer() {
    local srv_id="$1"

#    srv_info=$(openstack server show -f json "${srv_id}")
#    [ $? -ne 0 ] && return $?

#    status=$(echo "${srv_info}" | jq -r -c '.status')

#    while [ "${status}" != "ERROR" -a "${status}" != "ACTIVE" ];do
#        sleep 0.5
#        srv_info=$(openstack server show -f json "${srv_id}")
#        [ $? -ne 0 ] && return $?
#        status=$(echo "${srv_info}" | jq -r -c '.status')
#    done

    srv_info="ACTIVE"
    echo "${srv_info}"
}

function CreateInstance() {
    if [ -z "$INPUT" ];then
        echo "expected build params in stdin"
        exit 1
    fi

    INSTANCE_NAME=$(instanceName)

    CC_FILE=$(getCloudConfig)
    FLAVOR=$(flavor)
    IMAGE=$(image)
    NET=$(getOpenStackNetworkID)
    IMAGE_DETAILS=$(getOSImageDetails)

#    OS_TYPE=$(echo "${IMAGE_DETAILS}" | jq -c -r '.properties.os_type')
#    checkValNotNull "${OS_TYPE}" "os_type" || return $?
#    DISTRO=$(echo "${IMAGE_DETAILS}" | jq -c -r '.properties.os_distro')
#    checkValNotNull "${OS_TYPE}" "os_distro" || return $?
#    VERSION=$(echo "${IMAGE_DETAILS}" | jq -c -r '.properties.os_version')
#    checkValNotNull "${VERSION}" "os_version" || return $?
#    ARCH=$(echo "${IMAGE_DETAILS}" | jq -c -r '.properties.architecture')
#    checkValNotNull "${ARCH}" "architecture" || return $?


    SOURCE_ARGS=""

#    if [ "${BOOT_FROM_VOLUME}" -eq 1 ];then
#        VOL_SIZE=$(getVolumeSizeFromFlavor "${FLAVOR}")
#        VOL_INFO=$(createVolumeFromImage "${IMAGE}" "${VOL_SIZE}" "${INSTANCE_NAME}")
#        if [ $? -ne 0 ];then
#            openstack volume delete "${INSTANCE_NAME}" || true
#        fi
#        SOURCE_ARGS="--volume ${INSTANCE_NAME}"
#    else
        SOURCE_ARGS="--image ${IMAGE}"
#    fi

    set +e

    TAGS="--tag garm-controller-id=${GARM_CONTROLLER_ID} --tag garm-pool-id=${GARM_POOL_ID}"
    echo "openstack server create --os-compute-api-version 2.52 ${SOURCE_ARGS} ${TAGS} --flavor \"${FLAVOR}\" --user-data=\"${CC_FILE}\" --network=\"${NET}\" \"${INSTANCE_NAME}\"" >> /tmp/dbg/createinstance.txt

#    SRV_DETAILS=$(openstack server create --os-compute-api-version 2.52 ${SOURCE_ARGS} ${TAGS} --flavor "${FLAVOR}" --user-data="${CC_FILE}" --network="${NET}" "${INSTANCE_NAME}")
#    date

#    if [ $? -ne 0 ];then
#        openstack volume delete "${INSTANCE_NAME}" || true
#        exit 1
#    fi

    echo "WAITFORSERVER $INSTANCE_NAME" >> /tmp/dbg/wait.txt
#    echo "wait"

    SRV_DETAILS=$(waitForServer "${INSTANCE_NAME}")
    if [ $? -ne 0 ];then
        CODE=$?
        # cleanup
        rm -f "${CC_FILE}" || true 
        openstack server delete "${INSTANCE_NAME}" || true
        openstack volume delete "${INSTANCE_NAME}" || true
        set -e
        FAULT=$(echo "${SRV_DETAILS}"| jq -rc '.fault')
        echo "Failed to create server: ${FAULT}"
        exit $CODE
    fi
    set -e
    rm -f "${CC_FILE}" || true

#SRV_ID="1"
#SRV_ID=$( echo $((1 + $RANDOM % 100)) )

# get from env
SRV_ID=$( echo ${INSTANCE_NAME} | tr -d "[a-z]" | awk '{printf $1}' )

STATUS="ACTIVE"
FAULT=
FAULT_VAL=
#    SRV_ID=$(echo "${SRV_DETAILS}" | jq -r -c '.id')
#    STATUS=$(echo "${SRV_DETAILS}" | jq -r -c '.status')
#    FAULT=$(echo "${SRV_DETAILS}" | jq -r -c '.fault')
#    FAULT_VAL=""
#    if [ ! -z "${FAULT}" -a "${FAULT}" != "null" ];then
#        FAULT_VAL=$(echo "${FAULT}" | base64 -w0)
#    fi

#    echo "DBG"

OS_NAME="freebsd"
OS_TYPE="linux"
OS_VERSION="13.1-RELEASE"
ARCH="amd64"

    jq -rnc \
        --arg PROVIDER_ID ${SRV_ID} \
        --arg NAME "${INSTANCE_NAME}" \
        --arg OS_TYPE "${OS_TYPE}" \
        --arg OS_NAME "${DISTRO}" \
        --arg OS_VERSION "${VERSION}" \
        --arg ARCH "${ARCH}" \
        --arg STATUS "${STATUS_MAP[${STATUS}]}" \
        --arg POOL_ID "${GARM_POOL_ID}" \
        --arg FAULT "${FAULT_VAL}" \
        '{"provider_id": $PROVIDER_ID, "name": $NAME, "os_type": $OS_TYPE, "os_name": $OS_NAME, "os_version": $OS_VERSION, "os_arch": $ARCH, "status": $STATUS, "pool_id": $POOL_ID, "provider_fault": $FAULT}' >> /tmp/dbg/result_create.txt.$$


    jq -rnc \
        --arg PROVIDER_ID ${SRV_ID} \
        --arg NAME "${INSTANCE_NAME}" \
        --arg OS_TYPE "${OS_TYPE}" \
        --arg OS_NAME "${DISTRO}" \
        --arg OS_VERSION "${VERSION}" \
        --arg ARCH "${ARCH}" \
        --arg STATUS "${STATUS_MAP[${STATUS}]}" \
        --arg POOL_ID "${GARM_POOL_ID}" \
        --arg FAULT "${FAULT_VAL}" \
        '{"provider_id": $PROVIDER_ID, "name": $NAME, "os_type": $OS_TYPE, "os_name": $OS_NAME, "os_version": $OS_VERSION, "os_arch": $ARCH, "status": $STATUS, "pool_id": $POOL_ID, "provider_fault": $FAULT}'
}

function DeleteInstance() {
    local instance_id="${GARM_INSTANCE_ID}"
    if [ -z "${instance_id}" ]; then
        echo "missing instance ID in env"
        return 1
    fi

    jname="${GARM_INSTANCE_ID}"

    if [ -r /tmp/dbg/${GARM_INSTANCE_ID}.conf ]; then
	    jname=$( cat /tmp/dbg/${GARM_INSTANCE_ID}.conf | awk '{printf $1}' )
	    echo "found id by garm_instance_id.conf /tmp/dbg/${GARM_INSTANCE_ID}.conf: ${jname}"
    fi

    if [ -z "${jname}" ]; then
	    echo "delete: unable to read /tmp/dbg/${GARM_INSTANCE_ID}.conf - no file" > /tmp/dbg/destroy.log.$$
	    return 0	# req 0
    fi

    echo "env NOCOLOR=1 /usr/local/bin/cbsd bdestroy env${jname}" > /tmp/dbg/destroy.log.$$
    env NOCOLOR=1 /usr/local/bin/cbsd bdestroy env${jname} > /tmp/dbg/destroy.log.$$ 2>&1

	[ -r /tmp/dbg/${GARM_INSTANCE_ID}.conf ] && /bin/rm -f /tmp/dbg/${GARM_INSTANCE_ID}.conf

    # always req 0
    return 0

#    set +e
#    instance_info=$(openstack server show "${instance_id}" -f json 2>&1)
#    if [ $? -ne 0 ];then
#        CODE=$?
#        set -e
#        if [ "${instance_info}" == "No server with a name or ID of*" ];then
#            return 0
#        fi
#        return $CODE
#    fi
#    set -e
#    VOLUMES=$(echo "${instance_info}" | jq -r -c '.volumes_attached[] | .id')
#
#    openstack server delete "${instance_id}"
#    for vol in "$VOLUMES";do
#        waitForVolume "${vol}"
#        openstack volume delete $vol || true
#    done
}

StartInstance() {
	local instance_id="${GARM_INSTANCE_ID}"
	if [ -z "${instance_id}" ];then
		echo "missing instance ID in env"
		return 1
	fi

	openstack server start "${instance_id}"
}

StopServer() {
	local instance_id="${GARM_INSTANCE_ID}"
	if [ -z "${instance_id}" ];then
		echo "missing instance ID in env"
		return 1
	fi

	openstack server stop "${instance_id}"
}

cur_time=$( /bin/date +%s )

if [ -n "${GARM_COMMAND}" ]; then
	env > /tmp/dbg/wakeup-${GARM_COMMAND}-${cur_time}.log
fi

case "${GARM_COMMAND}" in
	CreateInstance)
		CreateInstance
		;;
	DeleteInstance)
		DeleteInstance
		;;
	GetInstance)
		echo "GetInstance not implemented"
		exit 1
		;;
	ListInstances)
		echo "ListInstances not implemented"
		exit 1
		;;
	StartInstance)
		StartInstance
		;;
	StopInstance)
		StopServer
		;;
	RemoveAllInstances)
		echo "RemoveAllInstances not implemented"
		exit 1
		;;
	*)
		echo "Invalid GARM provider command: \"$GARM_COMMAND\""
		exit 1
		;;
esac

exit 0
