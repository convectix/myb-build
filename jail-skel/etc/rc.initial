#!/bin/sh
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
#
# /etc/rc.initial
#

. /etc/rc.conf
. /etc/rc.subr
export workdir="${cbsd_workdir}"
. /usr/local/cbsd/cbsd.conf
. /usr/local/cbsd/subr/ansiicolor.subr
. /usr/jails/nc.inventory
. /usr/local/cbsd/subr/nc.subr
# Make sure the user can't kill us by pressing Ctrl-C
trap : 2
trap : 3
trap : 4
# Make sure the user can't access rootshell by pressing Ctrl-Z
trap : 18

check_tty()
{
	MYTTY=$( tty )

	[ "${MYTTY}" = "not a tty" ] && exit 0

	MYIP=$( /usr/bin/w -h -n | while read _user _tty _ip _x; do
		_tty="/dev/${_tty}"
		if [ "${_tty}" = "${MYTTY}" ]; then
			echo "${_ip}"
			exit 0
		fi
	done )

	[ -n "${MYIP}" ] && export MYIP="${MYIP}"
}

hwprobe()
{
	local p _send=0

	[ -n "${hw_probe_enabled}" ] && return 0
	[ ! -x /usr/local/bin/hw-probe ] && return 0

	${ECHO} "${H1_COLOR}MyBee first start. Before we start, would you like to send anonymous ( via hw-probe: ${H3_COLOR}https://bsd-hardware.info/${H1_COLOR} ) hardware data (one time, now)? This will allow us to improve hardware support in the future [Y] ?${N2_COLOR}"

	trap "export SEND_STATS=\"n\"" SIGHUP SIGINT SIGTERM
	# HUP INT ABRT BUS TERM EXIT

	read p

	trap ""

	[ -n "${SEND_STATS}" ] && p="${SEND_STATS}"

	if [ -z "${p}" ]; then
		_send=1
	else
		case "${p}" in
			[Yy])
				_send=1
				;;
		esac
	fi

	${SYSRC_CMD} -qf /etc/rc.conf hw_probe_enabled="1" > /dev/null 2>&1

	[ ${_send} -ne 1 ] && return 0

	/usr/local/bin/hw-probe -all -upload

}

check_sshflags()
{
	local _i

	for _i in ${sshd_flags}; do
		p1=${_i%%=*}
		p2=${_i##*=}
		[ "${p1}" != "-oPermitRootLogin" ] && continue
		[ "${p2}" = "yes" ] && return 0
	done

	return 1
}

change_sshflags()
{
	case "${myb_ssh_root_ssh}" in
		[Ee][Nn]*)
			${SYSRC_CMD} -qf /etc/rc.conf sshd_flags="-oUseDNS=no -oPermitRootLogin=no -oPort=22" > /dev/null 2>&1
			;;
		[Dd][Ii]*)
			${SYSRC_CMD} -qf /etc/rc.conf sshd_flags="-oUseDNS=no -oPermitRootLogin=yes -oPort=22" > /dev/null 2>&1
			;;
		*)
			return 0
			;;
	esac

	${SERVICE_CMD} sshd restart
}

## MAIN
check_tty

hwprobe

# Set our operating platform
PLATFORM="MyBee"
# ${myb_version}
if [ -r /usr/local/etc/mybee/version ]; then
	. /usr/local/etc/mybee/version
fi

[ -z "${myb_version}" ] && myb_version="unknown"

producturl="https://myb.convectix.com"

HOSTNAME=$( hostname -s )
/usr/sbin/pw usermod root -c "${PLATFORM} ${HOSTNAME}"

MYB_SMTP_CONFIG_FILE="/usr/local/etc/smtp.conf"

[ -z "${myb_net_cur_profile}" ] && myb_net_cur_profile="1"

while : ; do
	check_tty

	# exit loop
	[ -r /tmp/stop ] && exit 0
	# re-read ACL on/off, net profile
	. /etc/rc.conf

	if check_sshflags; then
		myb_ssh_root_ssh="Enabled "
	else
		myb_ssh_root_ssh="Disabled"
	fi

	[ -r ${MYB_SMTP_CONFIG_FILE} ] && . ${MYB_SMTP_CONFIG_FILE}

	if [ -z "${PUB_WL}" ]; then
		PUB_WL="disabled"
		${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf PUB_WL="${PUB_WL}" > /dev/null 2>&1
	fi
	if [ -z "${IP_WL}" ]; then
		IP_WL="disabled"
		${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf IP_WL="${IP_WL}" > /dev/null 2>&1
	fi

	case ${PUB_WL} in
		enabled)
			PUB_WL_COLOR="${H2_COLOR}"
			;;
		disabled)
			PUB_WL_COLOR="${W1_COLOR}"
			;;
	esac
	case ${IP_WL} in
		enabled)
			IP_WL_COLOR="${H2_COLOR}"
			;;
		disabled)
			IP_WL_COLOR="${W1_COLOR}"
			;;
	esac

	uplink_iface4=$( /sbin/route -n -4 get 0.0.0.0 2>/dev/null | /usr/bin/awk '/interface/{print $2}' )
	uplink_iface6=$( /sbin/route -n -6 get ::0 2>/dev/null | /usr/bin/awk '/interface/{print $2}' )

	if [ -n "${uplink_iface6}" ]; then
		ip6=$( /sbin/ifconfig ${uplink_iface6} | /usr/bin/awk '/inet6 *:*+/{print $2}' | /usr/bin/grep -v %${uplink_iface6}$ | /usr/bin/head -n1 )
	else
		# route can not work in jail, looks at all
		ip6=$( /sbin/ifconfig | /usr/bin/awk '/inet6 *:*+/{print $2}' | /usr/bin/grep -v %${uplink_iface6}$ | /usr/bin/head -n1 )
	fi

	if [ -n "${uplink_iface4}" ]; then
		ip4=$( /sbin/ifconfig ${uplink_iface4} | /usr/bin/awk '/inet [0-9]+/{print $2}'| /usr/bin/head -n1 )
	else
		# route can not work in jail, looks at all
		ip4=$( /sbin/ifconfig | /usr/bin/awk '/inet [0-9]+/{print $2}'| /usr/bin/head -n1 )
	fi

	VPN_COLOR="${H2_COLOR}"
	[ ! -x /root/bin/vpn.sh ] && VPN_COLOR="${DGRAY}"
	PROFILE_COLOR="${H2_COLOR}"
	[ ! -x /root/bin/net_profile.sh ] && PROFILE_COLOR="${DGRAY}"
	TEMPLATE_COLOR="${H2_COLOR}"
	[ ! -x /root/bin/template.sh ] && TEMPLATE_COLOR="${DGRAY}"

	if [ "${SMTP_CONFIGURED}" = "1" ]; then
		SMTP_COLOR="${H2_COLOR}"
		SMTP_STATUS=" configured "
	else
		SMTP_COLOR="${DGRAY}"
		SMTP_STATUS="unconfigured"
	fi

	${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf ip4="${ip4}" > /dev/null
	${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf ip6="${ip6}" > /dev/null

	echo
	echo "Welcome to ${PLATFORM} ${myb_version} console."
	echo
	echo -e "    Copyright (c) 2013-2022 CBSD Team"
	echo -e "    Copyright (c) 2021-2022 ConvectIX Team"
	echo -e "    ${LCYAN}Visit: $producturl for system updates! ${N0_COLOR}"
	echo
	echo -e "        API address: ${W1_COLOR}http://${ip4}${N0_COLOR}"
	[ -n "${ip6}" ] && echo -e "        API v6 address: ${W1_COLOR}http://${ip6}${N0_COLOR}"
	echo -e "        LAN Network IPv4 Address: ${H3_COLOR}10.0.0.1${N0_COLOR}"
	# display menu
	echo
	echo "Console Menu"
	echo "------------"
	echo -e "${H2_COLOR}1) (Re)Configure Host Network${NORMAL}     ${H2_COLOR}11) Configure Hosts Allow for API ${IP_WL_COLOR}(${IP_WL})${NORMAL}"
	echo -e "${H2_COLOR}2) Reset 'root' user password${NORMAL}     ${H2_COLOR}12) Configure Pubkey WhiteList ${PUB_WL_COLOR}(${PUB_WL})${NORMAL}"
	echo -e "${VPN_COLOR}3) Configure VPN access for API${NORMAL}   ${DGRAY}13) Add cluster node${NORMAL}"
	echo -e "${H2_COLOR}4) Change VM network profile (${myb_net_cur_profile})${NORMAL}  ${H2_COLOR}14) Console Keyboard Map${NORMAL}"
	echo -e "${TEMPLATE_COLOR}5) Install container template${NORMAL}     ${DGRAY}15) NFS/PVC/P9FS shares for VM${NORMAL}"
	echo -e "${H2_COLOR}6) Shell ( warm cloud image )${NORMAL}     ${DGRAY}16) Set API FQDN ( + certbot )${NORMAL}"
	echo -e "${H2_COLOR}7) Reboot Server${NORMAL}                  ${H2_COLOR}17) Kubernetes clusters setting${NORMAL}"
	echo -e "${H2_COLOR}8) Shutdown Server${NORMAL}                ${DGRAY}18) ${NORMAL}"
	echo -e "${H2_COLOR}9) Configure SMTP${NORMAL} (${SMTP_COLOR}${SMTP_STATUS}${NORMAL})  ${DGRAY}19) ${NORMAL}"
	echo -e "${H2_COLOR}10) SSH root user: ${myb_ssh_root_ssh}${NORMAL}       ${DGRAY}20) Add cluster node${NORMAL}"
	echo
	echo -e "${H2_COLOR}0) Exit${NORMAL}"
	echo
	read -p "Enter a number:" opmode

	# see what the user has chosen
	case ${opmode} in
		0)
			exit 0
			;;
		1)
			bsdinstall netconfig
			if [ -r /tmp/bsdinstall_etc/resolv.conf ]; then
				cp -a /tmp/bsdinstall_etc/resolv.conf /etc/resolv.conf
			fi
			if [ -r /tmp/bsdinstall_etc/rc.conf.net ]; then
				cut -d "=" -f 1 /tmp/bsdinstall_etc/rc.conf.net | while read _param; do
					grep . /etc/rc.conf > /etc/rc.conf.bak
					# sed 'd
					grep -v ${_param} /etc/rc.conf.bak > /etc/rc.conf
				done
				echo >> /etc/rc.conf
				cat /tmp/bsdinstall_etc/rc.conf.net >> /etc/rc.conf
				echo "reboot the host to apply the changes"
				read p
			fi
		 	;;
		2)
			echo "not implemented yet"
			read p
		 	;;
		3)
			passwd root
			;;
		4)
			/usr/local/bin/cbsd myb_net_profile
			;;
		5)
			/etc/rc.initial.ping
			echo "not implemented yet"
			read p
			;;
		6)
			export PATH=/root/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
			export MYB_SUBSHELL=1
			/root/bin/checkiso.sh
			;;
		7)
			/etc/rc.initial.reboot
			;;
		8)
			/etc/rc.initial.halt
			;;
		9)
			/usr/local/bin/cbsd config_smtp
			;;
		10)
			change_sshflags
			;;
		11)
			_editfile=1		# always edit file
			case ${IP_WL} in
				enabled)
					if getyesno "Turn ACL OFF? ('n' or '0' - leave as enabled) "; then
						IP_WL="disabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf IP_WL="${IP_WL}" > /dev/null 2>&1
						_editfile=0
						cbsd myb_ip_whitelist mode=off
					fi
					;;
				disabled)
					if getyesno "Turn ACL ON? ('n' or '0' - leave as disabled) "; then
						IP_WL="enabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf IP_WL="${IP_WL}" > /dev/null 2>&1
					fi
					;;
			esac
			if [ "${_editfile}" = "1" ]; then
				cbsd myb_ip_whitelist
			fi
		;;
		12)
			_editfile=1		# always edit file
			case ${PUB_WL} in
				enabled)
					if getyesno "Turn Pubkey ACL OFF? ('n' or '0' - leave as enabled) "; then
						PUB_WL="disabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf PUB_WL="${PUB_WL}" > /dev/null 2>&1
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf cbsd_mq_api_flags="-listen 127.0.0.1:65531" > /dev/null 2>&1
						_editfile=0
						${SERVICE_CMD} cbsd-mq-api restart
					fi
					;;
				disabled)
					if getyesno "Turn Pubkey ACL ON? ('n' or '0' - leave as disabled) "; then
						PUB_WL="enabled"
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf PUB_WL="${PUB_WL}" > /dev/null 2>&1
						${LOCKF_CMD} -s -t10 /tmp/sysrc_rc.conf.lock ${SYSRC_CMD} -qf /etc/rc.conf cbsd_mq_api_flags="-listen 127.0.0.1:65531 -allowlist /usr/local/etc/cbsd-mq-api.allow" > /dev/null 2>&1
						${SERVICE_CMD} cbsd-mq-api restart
					fi
					;;
			esac
			if [ "${_editfile}" = "1" ]; then
				cbsd myb_pub_whitelist
			fi
			;;
		13)
			echo "not implemented yet"
			read p
			;;
		14)
			/usr/sbin/kbdmap
			;;
		17)
			/usr/local/bin/cbsd myb_k8s_settings
			;;
		*)
			;;
	esac
done

exit 0
