#!/bin/sh
## Keep in SYNC: /usr/local/cbsd/modules/convectix.d/cix_upgrade + CPR/Build
list_packages()
{
	local STD_OUT="/dev/stdout"
	local STD_OUT_JSON="/dev/stdout"

	[ -z "${json}" ] && json="1"
	[ -z "${save_repo}" ] && save_repo="1"

	local OPATH="${PATH}"
	PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	[ -z "${PKG_CMD}" ] && PKG_CMD=$( which pkg || which pkg-static )
	[ -z "${PKG_CMD}" ] && PKG_CMD=$( which pkg )
	[ -z "${CUT_CMD}" ] && CUT_CMD=$( which cut )
	[ -z "${AWK_CMD}" ] && AWK_CMD=$( which awk )
	[ -z "${GREP_CMD}" ] && GREP_CMD=$( which grep )
	[ -z "${SED_CMD}" ] && SED_CMD=$( which sed )
	[ -z "${TRUNCATE_CMD}" ] && TRUNCATE_CMD=$( which truncate )
	[ -z "${CAT_CMD}" ] && CAT_CMD=$( which cat )

	PATH="${OPATH}"

	if [ ${save_repo} -eq 1 ]; then
		STD_OUT="/tmp/clonos_ver.conf"
		STD_OUT_JSON="/tmp/clonos_ver.json"
		${TRUNCATE_CMD} -s0 ${STD_OUT} ${STD_OUT_JSON}
	fi

	cbsd_ver=$( /usr/local/bin/cbsd version 2>/dev/null | ${AWK_CMD} '{printf $1}' )
	if [ -z "${cbsd_ver}" ]; then
		cbsd_ver=$( ${PKG_CMD} info cbsd 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )
	fi
	php_ver=$( ${PKG_CMD} info php[0-9][0-9]-[0-9]* 2>/dev/null )
	myb_ver=$( ${PKG_CMD} info myb 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )
	clonos_ver=$( ${PKG_CMD} info clonos 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )

	cbsd_api_ver=$( ${PKG_CMD} info cbsd-mq-api 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )
	cbsd_router_ver=$( ${PKG_CMD} info cbsd-mq-router 2>/dev/null | ${GREP_CMD} ^Version | ${CUT_CMD} -d : -f 2 | ${AWK_CMD} '{printf $1}' )

	installed_component=

	for i in cbsd_api_ver cbsd_router_ver cbsd_ver clonos_ver myb_ver php_ver; do
		_val=
		eval _val="\$$i"
		[ -z "${_val}" ] && continue
		component=$( echo ${i} | ${SED_CMD} 's:_ver::g' )

		if [ ${save_repo} -eq 1 ]; then
			printf "${component}_ver_new=\"${_val}\"\n" >>${STD_OUT}
		else
			if [ ${json} -eq 0 ]; then
				printf "${component}: ${_val}\n" >>${STD_OUT}
				continue
			fi
		fi

		if [ -z "${installed_component}" ]; then
			installed_component="${i}"
		else
			installed_component="${installed_component} ${i}"
		fi
		installed_component_num=$(( installed_component_num + 1 ))
	done

	[ ${json} -eq 0 ] && return 0

	${CAT_CMD} >>${STD_OUT_JSON} <<EOF
{
  "installed": {
EOF

	current_component=0
	for i in ${installed_component}; do
		current_component=$(( current_component + 1 ))
		_val=
		eval _val="\$$i"
		[ -z "${_val}" ] && continue
		component=$( echo ${i} | ${SED_CMD} 's:_ver::g' )
		if [ ${current_component} -eq ${installed_component_num} ]; then
			printf "    \"${component}\": \"${_val}\"\n" >>${STD_OUT_JSON}
		else
			printf "    \"${component}\": \"${_val}\",\n" >>${STD_OUT_JSON}
		fi
	done

	if [ ${save_repo} -eq 1 ]; then
		echo "  }" >>${STD_OUT_JSON}
		echo "}" >>${STD_OUT_JSON}
		return 0
	fi

	[ -r /tmp/clonos_ver.conf ] && . /tmp/clonos_ver.conf

	${CAT_CMD} <<EOF
  },
  "latest": {
EOF

	latest_component_num=0
	current_component_num=0

	for i in ${installed_component}; do
		current_component=$(( current_component + 1 ))
		_val=
		eval _val="\$$i"
		[ -z "${_val}" ] && continue
		i_new="${i}_new"
		eval _val_new="\$$i_new"
		[ -z "${_val_new}" ] && continue
		if [ "${_val_new}" != "${_val}" ]; then
			latest_component_num=$(( latest_component_num + 1 ))
			eval latest_param${latest_component_num}="\"${i}\""
			eval latest_val${latest_component_num}="${_val_new}"
		fi
	done

	while [ ${current_component_num} -ne ${latest_component_num} ]; do
		current_component_num=$(( current_component_num + 1 ))
		eval _par="\$latest_param${current_component_num}"
		eval _val="\$latest_val${current_component_num}"
		component=$( echo ${_par} | ${SED_CMD} 's:_ver::g' )
		if [ ${current_component_num} -eq ${latest_component_num} ]; then
			printf "    \"${component}\": \"${_val}\"\n" >>${STD_OUT_JSON}
		else
			printf "    \"${component}\": \"${_val}\",\n" >>${STD_OUT_JSON}
		fi

	done
	${CAT_CMD} <<EOF
  }
}
EOF

}

json=1
save_repo=1
list_packages

exit 0
